#!/usr/bin/zsh -x

# Assumes a working internet connection.

# Exports the following environment variables to config scripts:

export LOOPBACK # TODO: change DEVICE to FILE, change LOOPBACK to DEVICE
export BOOT_DEVICE
export ENCRYPTED_DEVICE
export ROOT_DEVICE
export ENCRYPTION
export RAMFS

export HOSTNAME
export NEW_USER
export LANG
export KEYMAP
export TZ

base=(base arch-install-scripts syslinux zsh grml-zsh-config p7zip vim git
openssh wpa_supplicant python sudo)

console=(alsa-utils base-devel bc cmake clang gdb gnu-netcat googlecl iotop
irssi john lsof ltrace nasm nss-mdns ntfs-3g ntp ntop nmap openssh openvpn
python python-pip python2-crypto python2-pip python2-virtualenv qemu rsync ruby
screen subversion strace scrot tcpdump tor transmission-cli unrar unzip w3m
wget whois words wpa_supplicant zsh mercurial)

xorg=(dmenu bless evince flashplugin gimp tk gitg gtk2fontsel hsetroot i3status
i3-wm mplayer pidgin pidgin-otr slim slock surf transmission-gtk xchat xorg
xorg-xinit xpdf xterm firefox chromium ttf-freefont rxvt-unicode
gnome-terminal)

# ttf-bitstream-vera ttf-dejavu ttf-freefont ttf-liberation

# No support for AUR or multilib just yet...
# aur=(rxvt-unicode-patched metasploit volatility-svn wireshark-cli
# wireshark-gtk sqlmap gist paxctl vim-gist snort sublime-text tlp sup hub jdk
# intellij-idea-community-edition rar)
#
# opengl=(mesa-libgl glu glxinfo glxgears glew glm glfw)
#
# multilib=(multilib-devel skype xf86-video-intel intel-dri lib32-intel-dri
# libtxc_dxtn lib32-libtxc_dxtn steam)

error() {
  ! echo Error: $@
}

check_running_root() {
  [[ $(id -u) == 0 ]] || error "Run this script as root."
}

parse_options() {
  ENCRYPTION=yes
  RAMFS=
  HOSTNAME=roofix
  NEW_USER=user
  LANG=en_AU.UTF-8
  KEYMAP=dvorak
  TZ=Australia/Sydney
  while getopts ':nru:h:l:k:t:p:' opt; do
    case $opt in
      h) HOSTNAME=$OPTARG ;;
      n) ENCRYPTION= ;;
      r) RAMFS=1 ;;
      u) NEW_USER=$OPTARG ;;
      l) LANG=$OPTARG ;;
      k) KEYMAP=$OPTARG ;;
      t) TZ=$OPTARG ;;
      p) PACKAGES=("${(s/,/)OPTARG}") ;;
      ?) error "Unknown option $OPTARG" ;;
    esac
  done
  shift $((OPTIND-1))
  DEVICE=$1
  [[ -n $DEVICE ]] || error "No device provided."
  ! mount | grep -q $DEVICE || error "$DEVICE is mounted."
  if [[ ! -e $DEVICE || -f $DEVICE ]]; then
    echo "$DEVICE does not exist or is a regular file. Creating a 16G image file."
    dd of=$DEVICE bs=1 seek=16G count=0
  fi
}

setup_loopback() {
  modprobe -r loop || true
  modprobe loop max_part=15
  LOOPBACK=$(losetup --show -f $DEVICE)
}

cleanup_loopback() {
  losetup -d $LOOPBACK
}

get_passphrase() {
  set +x
  stty -echo
  passphrase='a'
  passphrase2='b'
  while [[ $passphrase != $passphrase2 ]]; do
    echo -n "encryption passphrase: "
    read passphrase
    echo -n "again: "
    read passphrase2
    if [[ $passphrase != $passphrase2 ]]; then
      echo "didn't match, try again"
    fi
  done
  stty echo
  set -x
}

map_root_device() {
  if [[ -n $ENCRYPTION ]]; then
    set +x
    echo -n $passphrase | cryptsetup luksOpen $ENCRYPTED_DEVICE $CRYPTNAME -d -
    set -x
  fi
}

unmap_root_device() {
  if [[ -n $ENCRYPTION ]]; then
    cryptsetup luksClose $CRYPTNAME
  fi
}

setup_encryption() {
  if [[ -n $ENCRYPTION ]]; then
    CRYPTNAME=root$RANDOM
    ENCRYPTED_DEVICE=$ROOT_DEVICE
    ROOT_DEVICE=/dev/mapper/$CRYPTNAME
    get_passphrase
    set +x
    echo -n $passphrase | cryptsetup -c aes-cbc-essiv:sha256 --use-random -y luksFormat $ENCRYPTED_DEVICE -d -
    set -x
  fi
}

create_partitions() {
  echo -e "o\nn\np\n1\n\n+100M\nn\np\n2\n\n\na\n1\nw" | fdisk $LOOPBACK
  cleanup_loopback
  setup_loopback
  BOOT_DEVICE=${LOOPBACK}p1
  ROOT_DEVICE=${LOOPBACK}p2
}

create_filesystems() {
  mkfs.ext4 $BOOT_DEVICE
  mkfs.ext4 $ROOT_DEVICE
}

mount_filesystems() {
  TARGET=$(mktemp -d)
  mount $ROOT_DEVICE $TARGET
  mkdir -p $TARGET/boot
  mount $BOOT_DEVICE $TARGET/boot
}

unmount_filesystems() {
  umount $TARGET/boot
  umount $TARGET
  rmdir $TARGET
}

install_packages() {
  for package_group in base $PACKAGES; do
    pacstrap -c -C pacstrap.conf $TARGET ${(P)package_group} --needed
  done
}

configure_packages() {
  pushd $(dirname $0)
    cd roofix-config
    makepkg --asroot -cf
    pacman -r $TARGET -U roofix-config*.tar.xz
    echo HOSTNAME=$HOSTNAME > $TARGET/etc/roofix.conf
    echo PRIVILEGED_USER=$NEW_USER >> $TARGET/etc/roofix.conf
    echo LANG=$LANG >> $TARGET/etc/roofix.conf
    echo KEYMAP=$KEYMAP >> $TARGET/etc/roofix.conf
    echo TZ=$TZ >> $TARGET/etc/roofix.conf

    if [[ -e /proc/sys/kernel/grsecurity/chroot_caps ]]; then
      remember_caps=$(</proc/sys/kernel/grsecurity/chroot_caps)
      remember_deny_chmod=$(</proc/sys/kernel/grsecurity/chroot_deny_chmod)
      echo 0 > /proc/sys/kernel/grsecurity/chroot_caps
      echo 0 > /proc/sys/kernel/grsecurity/chroot_deny_chmod
    fi
    arch-chroot $TARGET roofix-config
  popd
}

disk_setup() {
  setup_loopback
  create_partitions
  setup_encryption
  map_root_device
  create_filesystems
  mount_filesystems
}

clean_up() {
  if [[ -n "$remember_caps" ]]; then
    echo $remember_caps > /proc/sys/kernel/grsecurity/chroot_caps
    echo $remember_deny_chmod > /proc/sys/kernel/grsecurity/chroot_deny_chmod
  fi
  unmount_filesystems
  unmap_root_device
  cleanup_loopback
}

# TODO: unused for now. maybe integrate back into it after packaging is done
compress() {
  if [[ -n $RAMFS ]]; then
    tarball=$(mktemp)
    pushd $TARGET
      umount boot
      tar -cpzf $tarball *
      rm -rf *
      mkdir lost+found
    popd

    # if it's an image file, shrink it.
    # TODO: do minimal thing that boots better.
    if [[ -f $DEVICE ]]; then
      uuid=$(blkid -s UUID -o value $ROOT_DEVICE)
      clean_up || true # boot will be missing
      tarball_size=$(ls -l $tarball | cut -d' ' -f5)
      truncate -s $((tarball_size + 1024*1024*128 - tarball_size%512)) $DEVICE
      echo -e "d\n2\nn\n\n\n\n\nw\n" | fdisk $DEVICE
      setup_loopback && map_root_device
      mkfs.ext4 -U $uuid $ROOT_DEVICE
      mount_filesystems
    fi

    mv $tarball $TARGET/image
  fi
}

TRAPZERR() {
  umount $TARGET/mnt 2> /dev/null
  rm -f $tarball

  clean_up 2> /dev/null

  kill $$
}

TRAPINT() {
  TRAPZERR
}

check_running_root
parse_options $@
disk_setup
install_packages
configure_packages
clean_up

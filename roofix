#!/usr/bin/zsh -ex

# Assumes a working internet connection.

cd $(dirname $0)

error() {
  ! echo Error: $@
}

check_running_root() {
  [[ $(id -u) == 0 ]] || error "Run this script as root."
}

parse_options() {
  export ENCRYPTION=yes
  unset RAMFS
  export HOSTNAME=roofix
  export NEW_USER=user
  export LANG=en_AU.UTF-8
  export KEYMAP=dvorak
  export TZ=Australia/Sydney
  while getopts ':nru:h:l:k:t:p:' opt; do
    case $opt in
      h) HOSTNAME=$OPTARG ;;
      n) unset ENCRYPTION ;;
      r) RAMFS=1 ;;
      u) NEW_USER=$OPTARG ;;
      l) LANG=$OPTARG ;;
      k) KEYMAP=$OPTARG ;;
      t) TZ=$OPTARG ;;
      p) PACKAGES=("${(s/,/)OPTARG}") ;;
      ?) error "Unknown option $OPTARG" ;;
    esac
  done
  shift $((OPTIND-1))
  export DEVICE=$1
  [[ -n $DEVICE ]] || error "No device provided."
  ! mount | grep -q $DEVICE || error "$DEVICE is mounted."
  if [[ ! -e $DEVICE || -f $DEVICE ]]; then
    echo "$DEVICE does not exist or is a regular file. Creating a 16G image file."
    dd of=$DEVICE bs=1 seek=16G count=0
  fi
}

setup_loopback() {
  modprobe -r loop || true
  modprobe loop max_part=15
  LOOPBACK=$(losetup --show -f $DEVICE)
}

cleanup_loopback() {
  losetup -d $LOOPBACK
}

get_passphrase() {
  stty -echo
  passphrase='a'
  passphrase2='b'
  while [[ $passphrase != $passphrase2 ]]; do
    echo -n "encryption passphrase: "
    read passphrase
    echo -n "again: "
    read passphrase2
    if [[ $passphrase != $passphrase2 ]]; then
      echo "didn't match, try again"
    fi
  done
  stty echo
}

map_root_device() {
  echo -n $passphrase | cryptsetup luksOpen ${LOOPBACK}p2 $CRYPTNAME -d -
  ROOT_DEVICE=/dev/mapper/$CRYPTNAME
}

unmap_root_device() {
  cryptsetup luksClose $CRYPTNAME
}

setup_encryption() {
  set +x
  CRYPTNAME=root$RANDOM
  get_passphrase
  echo -n $passphrase | cryptsetup -c aes-cbc-essiv:sha256 --use-random -y luksFormat ${LOOPBACK}p2 -d -
  map_root_device
  set -x
}

create_partitions() {
  echo -e "o\nn\np\n1\n\n+32M\nn\np\n2\n\n\na\n1\nw" | fdisk $LOOPBACK
  # cycle this to 
  cleanup_loopback
  setup_loopback
  BOOT_DEVICE=${LOOPBACK}p1
  if [[ -n $ENCRYPTION ]]; then
    setup_encryption
  else
    ROOT_DEVICE=${LOOPBACK}p2
  fi
}

create_filesystems() {
  mkfs.ext4 $BOOT_DEVICE
  mkfs.ext4 $ROOT_DEVICE
}

mount_filesystems() {
  TARGET=$(mktemp -d)
  mount $ROOT_DEVICE $TARGET
  mkdir -p $TARGET/boot
  mount $BOOT_DEVICE $TARGET/boot
}

unmount_filesystems() {
  umount $TARGET/boot
  umount $TARGET
  rmdir $TARGET
}

check_running_root
parse_options $@
setup_loopback
create_partitions
create_filesystems
mount_filesystems
unmount_filesystems
cleanup_loopback
